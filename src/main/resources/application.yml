# Common configuration for all profiles
spring:
  profiles:
    active: dev  # Active Spring profile (dev, prod, etc.)
  cache:
    type: redis  # Cache implementation type
  data:
    redis:
      host: ${SPRING_REDIS_HOST:localhost}
      port: ${SPRING_REDIS_PORT:6379}
      database: 0
      timeout: 2000
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1
  application:
    name: superhero-proxy  # Application name for identification
  kafka:
    bootstrap-servers: kafka:29092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: com.example.superheroproxy.config.ProtoSerializer

# Rate Limiting Configuration
rate:
  limit:
    permits-per-second: 10  # Maximum number of requests allowed per second to prevent overload

# Restful Server Configuration
server:
  port: 8080  # HTTP port for REST API endpoints

# SuperHero API Configuration
superhero:
  api:
    url: https://superheroapi.com/api  # Base URL for SuperHero API
    token: 1b3bc65ad40627f75f8edcdfbc67831d  # API authentication token
    ids:
      url: https://superheroapi.com/ids.html  # URL for hero ID reference
  cache:
    update:
      interval: 300  # Cache refresh interval in seconds
      initial-delay: 300  # Initial delay before first cache refresh

# gRPC Server Configuration
grpc:
  server:
    port: 9091  # Port for gRPC server
    security:
      enabled: false  # Whether to enable SSL/TLS security
    netty:
      keep-alive-time: 60  # Time in seconds to keep idle connections alive
      keep-alive-timeout: 30  # Timeout for keep-alive probes
      keep-alive-without-calls: false  # Whether to keep connections alive without active calls
      max-connection-idle: 120  # Maximum time in seconds a connection can be idle
      max-connection-age: 300  # Maximum lifetime of a connection in seconds
      max-connection-age-grace: 30  # Grace period for closing aged connections
      permit-keep-alive-time: 60  # Time in seconds to permit keep-alive requests
      permit-keep-alive-without-calls: false  # Whether to permit keep-alive without active calls
  client:
    channel:
      host: localhost  # gRPC server host
      port: 9091  # gRPC server port
      keep-alive:
        time: 60  # Client-side keep-alive time in seconds
        timeout: 30  # Client-side keep-alive timeout in seconds
        without-calls: false  # Whether to maintain keep-alive without active calls

# Notification Configuration
notification:
  max-subscribers-per-hero: 1000  # Maximum number of subscribers per superhero
  max-total-subscribers: 10000  # Maximum total number of subscribers across all heroes
  cleanup-interval-minutes: 5  # Interval for cleaning up inactive subscribers
  subscriber-timeout-minutes: 30  # Time before a subscriber is considered inactive
  notification-thread-pool-size: 20  # Number of threads for processing notifications

# Async Task Configuration
async:
  core-pool-size: 10  # Minimum number of threads in the thread pool
  max-pool-size: 30  # Maximum number of threads in the thread pool
  queue-capacity: 100  # Maximum number of tasks that can be queued
  thread-name-prefix: "AsyncNotification-"  # Prefix for async thread names

# Resilience4j Circuit Breaker Configuration
resilience4j:
  circuitbreaker:
    configs:
      default:
        register-health-indicator: true  # Whether to register health metrics
        sliding-window-type: COUNT_BASED  # Type of sliding window for failure counting
        sliding-window-size: 10  # Number of calls to track in the sliding window
        minimum-number-of-calls: 5  # Minimum calls before circuit breaker can trip
        permitted-number-of-calls-in-half-open-state: 3  # Number of calls allowed in half-open state
        automatic-transition-from-open-to-half-open-enabled: true  # Auto transition from open to half-open
        wait-duration-in-open-state: 5000  # Time in milliseconds to wait in open state
        failure-rate-threshold: 50  # Percentage of failures that will trip the circuit
        record-exceptions:
          - java.io.IOException  # Exceptions that count as failures
          - java.net.ConnectException
          - java.net.SocketTimeoutException
          - org.springframework.web.client.ResourceAccessException
          - org.springframework.web.client.HttpServerErrorException
          - org.springframework.web.client.HttpClientErrorException
    instances:
      externalApiService:
        base-config: default  # Use default circuit breaker configuration

kafka:
  topic:
    hero-updates: hero-updates